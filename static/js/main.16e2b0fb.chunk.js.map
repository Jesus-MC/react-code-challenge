{"version":3,"sources":["Icon/index.js","EditTractOwnership/index.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","EditTractOwnership","value","handleRemove","handleSave","handleUpdate","useState","owner","interest","lease","npri_owner","npri_interest","singleTractData","setSingleTractData","npriData","setNpriData","tractId","setTractId","uploadBtn","setUploadBtn","dataIndex","setDataIndex","useEffect","ownerRef","useRef","interestRef","leaseRef","npri_ownerRef","npri_interestRef","handleChange","e","target","name","moreFields","Row","Col","md","className","sm","Form","Control","type","placeholder","onChange","InputGroup","Append","Text","Button","variant","onClick","resetFormFields","current","Container","onSubmit","preventDefault","npris","tractValues","id","uuidv4","Object","keys","map","key","npri_id","required","ref","length","Jumbotron","Table","striped","bordered","hover","item","index","tractData","find","error","alert","setData","tractOwnerships","App","setTractData","values","newTract","filter","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16e2b0fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faLevelUpAlt,\r\n  faMinusCircle,\r\n  faPlus,\r\n  faSmile,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\r\n\r\nconst getIconProps = icon => {\r\n  switch (icon) {\r\n    case 'add':\r\n      return {\r\n        icon: 'plus',\r\n      };\r\n    case 'indent':\r\n      return {\r\n        icon: 'level-up-alt',\r\n        rotation: 90,\r\n      };\r\n    case 'remove':\r\n      return {\r\n        icon: 'minus-circle',\r\n      };\r\n    case 'smile':\r\n      return {\r\n        icon: 'smile',\r\n      };\r\n    default:\r\n      return {};\r\n  }\r\n};\r\n\r\nconst Icon = ({ icon }) => {\r\n  const iconProps = getIconProps(icon);\r\n\r\n  return <FontAwesomeIcon {...iconProps} />;\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport { TractOwnerShips } from '../App';\r\nimport { Container, Row, Col, Form, Button, Table, InputGroup, Jumbotron } from 'react-bootstrap';\r\nimport './index.css';\r\nimport Icon from '../Icon';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ntype Props = {\r\n  value?: TractOwnerShips[];\r\n  handleRemove:(id: string) => any;\r\n  handleSave: (values: TractOwnerShips) => any;\r\n  handleUpdate: (tractValues: TractOwnerShips, index: number) => any;\r\n}\r\n\r\nconst EditTractOwnership: React.FC<Props> = ({\r\n  value,\r\n  handleRemove,\r\n  handleSave,\r\n  handleUpdate\r\n}) => {\r\n\r\n\r\n  const [ singleTractData, setSingleTractData ] = useState({\r\n    owner: '', \r\n    interest: 0, \r\n    lease: '',\r\n    npri_owner: '', \r\n    npri_interest: ''\r\n  })\r\n\r\n  const [ npriData, setNpriData ] = useState<number>(0);\r\n  const [ tractId, setTractId ] = useState<string>('');\r\n  const [ uploadBtn, setUploadBtn ] = useState<boolean>(false); \r\n  const [dataIndex, setDataIndex] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    \r\n  }, [tractId])\r\n\r\n  const ownerRef = useRef<HTMLInputElement>(null);\r\n  const interestRef = useRef<HTMLInputElement>(null);\r\n  const leaseRef = useRef<HTMLInputElement>(null);\r\n  const npri_ownerRef = useRef<HTMLInputElement>(null);\r\n  const npri_interestRef = useRef<HTMLInputElement>(null);\r\n\r\n  const { owner, interest, lease, npri_owner, npri_interest, } = singleTractData;\r\n\r\n  const setData = (id: string, index: number) => {\r\n    setUploadBtn(true);\r\n    setTractId(id);\r\n    setDataIndex(index);\r\n    const tractData: any = value?.find((item: any) => item.id === id)\r\n    try { \r\n      // @ts-ignore\r\n      ownerRef.current.value = tractData.owner;\r\n      // @ts-ignore\r\n      interestRef.current.value = tractData.interest;\r\n      // @ts-ignore\r\n      leaseRef.current.value = tractData.lease;\r\n      Object.keys(tractData.npris).map((key: any) => {\r\n        // @ts-ignore    \r\n        npri_ownerRef.current.value = tractData.npris[key].npri_owner;\r\n        // @ts-ignore\r\n        npri_interestRef.current.value = tractData.npris[key].npri_interest;\r\n        \r\n      });\r\n    } catch (error) {\r\n      alert(error)\r\n    }\r\n    \r\n    setSingleTractData(tractData);\r\n  }\r\n\r\n  const handleChange = (e: any) => {\r\n    setSingleTractData({\r\n      ...singleTractData,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  const onSubmit = (e: any) => {    \r\n    e.preventDefault();\r\n    if (!tractId) {\r\n      let tractValues: any = {\r\n        owner: owner,\r\n        interest: interest,\r\n        lease: lease,\r\n        npris: [{\r\n          npri_owner: npri_owner,\r\n          npri_interest: npri_interest\r\n        }]\r\n      }\r\n      tractValues.id = uuidv4();\r\n      Object.keys(tractValues.npris).map((key: any) => tractValues.npris[key].npri_id = uuidv4());\r\n      handleSave(tractValues);\r\n      resetFormFields();\r\n    } else {\r\n      let tractValues: any = {\r\n        owner: owner,\r\n        interest: interest,\r\n        lease: lease,\r\n        npris: [{\r\n          npri_owner: npri_owner,\r\n          npri_interest: npri_interest\r\n        }]\r\n      }\r\n      handleUpdate(tractValues, dataIndex);\r\n      setUploadBtn(false);\r\n      resetFormFields();\r\n    }  \r\n  }\r\n\r\n  const moreFields = (npriData > 0) ? \r\n    <Row>\r\n      <Col md={3}>\r\n        <div className=''>\r\n          <Row>\r\n            <Col sm={1}>\r\n            <Icon icon=\"indent\" />\r\n            </Col>\r\n            <Col>\r\n              <Form.Control\r\n                type='text' \r\n                placeholder='NPRI Owner' \r\n                name='npri_owner1' \r\n                onChange={handleChange}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>  \r\n      </Col>\r\n      <Col md={3}></Col>\r\n      <Col md={3}>            \r\n        <InputGroup className=\"mb-3\">\r\n            <Form.Control\r\n              type='text'\r\n              placeholder=\"NPRI Interest\"\r\n              name='npri_interest1'\r\n              onChange={handleChange}\r\n            />\r\n            <InputGroup.Append>\r\n              <InputGroup.Text>%</InputGroup.Text>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n      </Col>\r\n      <Col md={3}>\r\n        <Row>\r\n          <Col></Col>\r\n          <Col sm={3}>\r\n            <Button variant=\"outline-dark\" className='btn-remove' onClick={() => setNpriData(npriData -1)}>\r\n              <Icon icon='remove'/>\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row> \r\n    : null;\r\n\r\n  const resetFormFields = () => {\r\n    // @ts-ignore\r\n    ownerRef.current.value = '';\r\n    // @ts-ignore\r\n    interestRef.current.value = '';\r\n    // @ts-ignore\r\n    leaseRef.current.value = '';\r\n    // @ts-ignore\r\n    npri_ownerRef.current.value = '';\r\n    // @ts-ignore\r\n    npri_interestRef.current.value = '';\r\n    setSingleTractData({\r\n      owner: '', \r\n      interest: 0, \r\n      lease: '',\r\n      npri_owner: '', \r\n      npri_interest: ''\r\n    });\r\n    setUploadBtn(false);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <form onSubmit={onSubmit} className='mb-3'>\r\n        <Row>\r\n          <Col md={3}><p>Owner</p></Col>\r\n          <Col md={3}><p>Mineral Interest</p></Col>\r\n          <Col md={3}><p>NPRI</p></Col>\r\n          <Col md={3}><p>Lease</p></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col md={3}>\r\n            <Form.Control \r\n              required\r\n              type='text' \r\n              placeholder='Owner' \r\n              name='owner' \r\n              onChange={handleChange} \r\n              ref={ownerRef}\r\n            />\r\n          </Col>\r\n          <Col md={3}>\r\n            <InputGroup className=\"mb-3\">\r\n              <Form.Control\r\n                required\r\n                type='text'\r\n                placeholder=\"Interest\"\r\n                name='interest'\r\n                onChange={handleChange}\r\n                ref={interestRef}\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>%</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n          <Col md={3}>\r\n          </Col>\r\n          <Col md={3}>\r\n            <Form.Control\r\n              required \r\n              type='text' \r\n              placeholder='Lease' \r\n              name='lease' \r\n              onChange={handleChange} \r\n              ref={leaseRef}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={3}>\r\n            <div className=''>\r\n              <Row>\r\n                <Col sm={1}>\r\n                <Icon icon=\"indent\" />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control\r\n                    type='text' \r\n                    placeholder='NPRI Owner' \r\n                    name='npri_owner' \r\n                    onChange={handleChange} \r\n                    ref={npri_ownerRef}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </div>  \r\n          </Col>\r\n          <Col md={3}></Col>\r\n          <Col md={3}>            \r\n            <InputGroup className=\"mb-3\">\r\n                <Form.Control\r\n                  type='text'\r\n                  placeholder=\"NPRI Interest\"\r\n                  name='npri_interest'\r\n                  onChange={handleChange}\r\n                  ref={npri_interestRef}\r\n                />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n\r\n        { moreFields }\r\n\r\n        <Row>\r\n          <Col md={3}>\r\n            <div className='btn-container'>\r\n              <Button variant=\"outline-dark\" className='btn-add' onClick={resetFormFields}>\r\n                Clear Fields\r\n              </Button>\r\n            </div>\r\n            {/*\r\n              (npriData <= 0) ? \r\n              <div className='btn-container'>\r\n                <Button variant=\"outline-dark\" className='btn-add' onClick={() => setNpriData(npriData +1)}>\r\n                  <Icon icon=\"add\" />\r\n                  Add NPRI\r\n                </Button>\r\n              </div>\r\n              : null\r\n            */}\r\n            \r\n          </Col>\r\n          <Col md={9}>\r\n            { uploadBtn ? \r\n              <Button variant=\"outline-success\" className='btn-save' type='submit'>Update</Button>:\r\n              <Button variant=\"outline-success\" className='btn-save' type='submit'>Save</Button> \r\n              \r\n            }\r\n            \r\n          </Col>\r\n        </Row>\r\n      </form>\r\n      \r\n      { value!.length === 0 ? \r\n        <Jumbotron className='mb-3'>          \r\n          <h2 className='data-label'>No data</h2>\r\n        </Jumbotron> :\r\n        <Table striped bordered hover variant=\"dark\" className='data-table'>\r\n          <thead>\r\n            <tr>\r\n              <th>Owner</th>\r\n              <th>Mineral Interest</th>\r\n              <th>Lease</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          {\r\n            value!.map((item: TractOwnerShips, index: number) =>\r\n              <tbody key={item.id}>\r\n                <tr>\r\n                  <td>{item.owner ? item.owner : 'N/A'}</td>\r\n                  <td>{item.interest ? item.interest : 'N/A'}</td>\r\n                  <td>{item.lease ? item.lease : 'N/A'}</td>\r\n                  <td>\r\n                    <Button variant=\"outline-primary\" onClick={() => setData(item!.id!, index)}>See data</Button>\r\n                    <Button variant=\"outline-danger\" className='btn-delete' onClick={() => handleRemove(item!.id!)}>Delete</Button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n              )\r\n            }\r\n        </Table> \r\n        \r\n      }\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EditTractOwnership;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nimport EditTractOwnership from './EditTractOwnership';\r\nimport Icon from './Icon';\r\n\r\nexport type TractOwnerShips = {\r\n  id?: string;\r\n  owner?: string;\r\n  interest?: number; \r\n  lease?: string; \r\n  npris?: NPRIsData[];\r\n}\r\n\r\nexport type NPRIsData = {\r\n  npri_id?: string; \r\n  npri_owner?: string; \r\n  npri_interest?: number;  \r\n}\r\n\r\nlet tractOwnerships: any = [{\r\n  id: uuidv4(),\r\n    owner: 'Luke Skywalker',\r\n    interest: 0.5,\r\n    lease: 'Tatooine Lease',\r\n    npris: [\r\n      {\r\n        npri_id: uuidv4(),\r\n        npri_owner: 'Leia Organa',\r\n        npri_interest: 0.45,\r\n      },\r\n      {\r\n        npri_id: uuidv4(),\r\n        npri_owner: 'Han Solo',\r\n        npri_interest: 0.15,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    id: uuidv4(),\r\n    owner: 'Steve Rogers',\r\n    interest: 115,\r\n    lease: 'James Barnes',\r\n    npris: [\r\n      {\r\n        npri_id: uuidv4(),\r\n        npri_owner: 'Sam Wilson',\r\n        npri_interest: 22,\r\n      }\r\n    ],\r\n}];\r\n\r\nfunction App() {\r\n  if (!tractOwnerships) {\r\n    tractOwnerships = [];\r\n  }\r\n\r\n  const [ tractData, setTractData ] = useState<TractOwnerShips[]>(tractOwnerships ? tractOwnerships : []);\r\n  \r\n  useEffect(() => {\r\n    try{\r\n\r\n    } catch(error) {\r\n      alert(error)\r\n    }\r\n  }, [tractData])\r\n\r\n  const handleSave = (values: TractOwnerShips) => {\r\n    setTractData([ ...tractData, values ])\r\n  }\r\n  \r\n  const handleRemove = (id: string) => {\r\n    const newTract = tractData.filter((item: any) => item.id !== id);\r\n    setTractData(newTract);\r\n    alert('Deleted data');\r\n  }\r\n\r\n  const handleUpdate = (values: TractOwnerShips, index: number) => {\r\n    tractData.splice(index, 1, values)\r\n    setTractData(tractData);\r\n    alert('Updated data');\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Jumbotron>\r\n            <h1>\r\n              Landdox Code Challenge <Icon icon=\"smile\" />\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <EditTractOwnership \r\n            value={tractData}\r\n            handleSave={handleSave}\r\n            handleRemove={handleRemove}\r\n            handleUpdate={handleUpdate}/>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: any) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: any, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: any, config: any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}